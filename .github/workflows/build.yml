on:
  workflow_call:
    inputs:
      release:
        type: boolean
        default: false
      latest:
        type: boolean
        default: ${{ github.ref == 'refs/heads/main' }}
      build_dep:
        type: string
        default: ""
      runs-on:
        type: string
        default: ubuntu-latest
      runs-on-amd64:
        type: string
        default: ubuntu-24.04
      runs-on-arm64:
        type: string
        default: ubuntu-24.04-arm
      force-arm-build:
        type: boolean
        default: false
      arch:
        type: string
        default: '["amd64", "arm64"]'
jobs:
  source:
    runs-on: ubuntu-latest
    outputs:
      pkg: ${{ steps.tag.outputs.pkg }}
      version: ${{ steps.tag.outputs.version }}
      skip_build: ${{ steps.tag.outputs.skip_build }}
      skip_release: ${{ steps.tag.outputs.skip_release }}
    steps:
      - uses: actions/checkout@v4
      - name: resolve container digest
        run: |
          if [ ! -e .container ]; then
            image="ghcr.io/gardenlinux/repo-debian-snapshot"
            podman pull "$image"
            digest="$(podman image inspect --format '{{ .Digest }}' "$image")"
            echo "$image@$digest" > .container
          fi
      - name: set release version suffix
        if: inputs.release
        run: |
          echo 'version_suffix=gl0' >> prepare_source
      - name: commit
        if: inputs.release
        run: |
          git checkout --detach HEAD
          git add .
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git commit -m "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      - name: build source pkg
        run: |
          dir="$(mktemp -d)"
          git clone --depth=1 https://github.com/gardenlinux/package-build "$dir/package-build"
          "$dir/package-build/build" --source-only .
      - uses: actions/upload-artifact@v4
        with:
          name: source
          include-hidden-files: true
          path: |
            .
            !.git
  binary:
    runs-on: ${{ matrix.arch == 'amd64' && inputs.runs-on-amd64 || matrix.arch == 'arm64' && inputs.runs-on-arm64 || inputs.run-on }}
    needs: source
    if: ${{ ! needs.source.outputs.skip_build }}
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJSON(inputs.arch) }}
    steps:
      - if: matrix.arch == 'amd64'
        run: |
          sudo rm -rf /{usr/{local/{lib/{android,heroku},.ghcup,share/{dotnet,powershell,miniconda,swift}},share/{dotnet,miniconda,swift}},opt/{hostedtoolcache,microsoft},imagegeneration}
          sudo docker system prune -a -f
      - if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends podman uidmap slirp4netns gh
      - uses: actions/download-artifact@v4
        with:
          name: source
      - name: fetch build dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir build_dep
          while read repo tag; do
            if [ -n "$repo" ] && [ -n "$tag" ]; then
              gh release download --dir build_dep --repo "$repo" "$tag"
              if [ -e build_dep/build.tar.xz.0000 ]; then
                cat build_dep/build.tar.xz.* | xz -d | tar -C build_dep -x
                rm build_dep/build.tar.xz.*
              fi
              if [ -e build_dep/build.tar.xz ]; then
                xz -d < build_dep/build.tar.xz | tar -C build_dep -x
                rm build_dep/build.tar.xz
              fi
              if [ -e build_dep/null ]; then
                rm build_dep/null
              fi
            fi
          done <<< "$(cat << 'EOF'
          ${{ inputs.build_dep }}
          EOF
          )"
      - name: build binary pkg
        run: |
          dir="$(mktemp -d)"
          git clone --depth=1 https://github.com/gardenlinux/package-build "$dir/package-build"
          arch="${{ matrix.arch }}"
          build=binary
          if [ "$arch" = arm64 ] && [ '${{ inputs.force-arm-build }}' != true ]; then
            build=any
          fi
          "$dir/package-build/build" --binary-only --arch "$arch" --build "$build" .
      - uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.arch }}
          include-hidden-files: true
          path: .build
  release:
    runs-on: ubuntu-latest
    needs: [source, binary]
    if: ${{ ! needs.source.outputs.skip_release }}
    steps:
      - uses: actions/download-artifact@v4
        if: contains(fromJson(inputs.arch), 'amd64')
        with:
          name: binary-amd64
          path: .build
      - uses: actions/download-artifact@v4
        if: contains(fromJson(inputs.arch), 'arm64')
        with:
          name: binary-arm64
          path: .build
      - name: publish release
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -lah .build
          RELEASE_NOTES=$(mktemp)
          echo "created by GitHub actions run [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" > $RELEASE_NOTES
          echo "" >> $RELEASE_NOTES
          echo "Files in this release:" >> $RELEASE_NOTES
          echo '```' >> $RELEASE_NOTES
          pushd .build
          find . -type f -exec sha256sum {} \; >> $RELEASE_NOTES
          popd
          echo '```' >> $RELEASE_NOTES

          pkg="${{ needs.source.outputs.pkg }}"
          version="${{ needs.source.outputs.version }}"
          tar -C .build -cv . | xz | split --bytes=1G --suffix-length=4 --numeric-suffix - build.tar.xz.
          gh release create "$version" --latest=${{ inputs.latest }} --verify-tag --title "${pkg}_${version}" --notes-file $RELEASE_NOTES build.tar.xz.*
